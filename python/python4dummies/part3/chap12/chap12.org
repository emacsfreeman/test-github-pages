#+TITLE: Gérer des listes
#+AUTHOR: Laurent Garnier

Des tas de gens perdent facilement de vue que la plupart des
techniques de programmation sont basées sur le monde réel. Une des
raisons tient au fait que les programmeurs utilisent souvent des
termes qui ne parlent pas au commun des mortels. Par exemple, vous
dites que vous rangez quelque chose dans une boîte. Les développeurs,
de leur côté, diront qu'ils affectent une valeur à une /variable/. Les
listes sont différentes. Après tout, tout le monde fait des listes
pour tout un tas de choses : des listes de courses, des listes de
bagages pour les vacances, des listes de tâches à réaliser, et ainsi
de suite. Ce chapitre traite donc de quelque choses que vous utilisez
déjà dans la vie de tous les jours. La seule différence, c'est que
vous devez envisager ce sujet du point de vue de Python. 

Si certaines personnes trouvent qu'il est difficile de travailler avec
les listes, c'est vraisemblablement parce qu'elles n'ont pas
l'habitude de réfléchir aux listes qu'elles créent. Lorsque vous
rédigez une liste, vous écrivez simplement une suite d'éléments dans
un ordre qui a un sens pour vous. Parfois, vous reprenez votre liste
pour en changer l'ordre (mais pourquoi ont-ils encore déplacé le rayon
dans le magasin ?). Ou bien vous parcourez la liste du bout du doigt
pour vérifier si vous n'avez rien oublié. En fait, tout ce que vous
pouvez faire avec vos propres listes est également réalisable avec
Python. Le point essentiel, c'est que devez bien réfléchir à ce que
vous faites si vous voulez que Python comprenne votre objectif.

* Organiser les informations dans une application

  Les gens créent listes pour organiser des informations, et en
  faciliter l'accès ainsi que les modifications. Vous utilisez des
  listes dans Python pour les mêmes raisons. Dans de nombreuses
  situations, vous avez besoin d'une forme d'organisation de vos
  données pour pouvoir gérer celles-ci. Par exemple, vous pourriez
  vouloir créer un << quelque chose >> qui contiendrait les jours de
  la semaine ou les mois de l'année. Les noms de ces éléments
  apparaîtraient dans une liste, comme si vous les aviez écrits sur
  une feuille de papier dans le monde réel. Les sections qui suivent
  approfondissent ces notions. 

** Définir une organisation à l'aide de listes

   Dans Python, une liste se définit comme étant un type de
   séquence. Les /séquences/ fournissent un certain procédé permettant
   à de multiples données de coexister en tant qu'entités distinctes
   dans un même espace de stockage. Prenons l'exemple d'un grand
   immeuble : en bas, vous trouvez plusieurs blocs de boîtes aux
   lettres. Chacun contient une rangée de boîtes, et chaque boîte
   contient du courrier. Python supporte d'autres types de séquences
   au nom parfois mystérieux :
   + Tuples
   + Dictionnaires
   + Piles
   + Files
   + Deques


   De toutes les séquences, les listes sont les plus faciles à
   comprendre, et les plus proches du monde réel. Se familiariser avec
   des listes vous aide à devenir plus à même de travailler avec
   d'autres types de séquences fournissant davantage de puissance et
   de souplesse. L'essentiel à retenir, c'est que les données sont
   enregistrées dans une liste comme si vous les écriviez sur une
   feuille de papier, un élément après l'autre. La liste a un début,
   un milieu et une fin. De plus, même si ce n'est pas forcément ce
   que vous feriez dans la vie de tous les jours, Python numérote
   automatiquement chacun des éléments de la liste. 

** Comprendre comment les ordinateurs voient les listes   

   Les ordinateurs ne voient pas les listes de la même façon que
   vous. Il n'a ni bloc-notes ni crayon. Il a juste de la
   mémoire. L'ordinateur enregistre donc chaque élément d'une liste
   dans un emplacement mémoire distinct. Cette mémoire est
   continue. Lorsque vous ajoutez de nouveaux éléments, ils viennent
   donc prendre place dans le prochain emplacement en mémoire. D'une
   certaine manière, une liste se comporte dans l'ordinateur un peu
   comme une série de boîtes alignées : le premier élément est rangé
   dans la première boîte, le second dans la deuxième, et ainsi de
   suite. L'avantage, c'est bien sûr que la mémoire de l'ordinateur
   peut contenir un très grand nombre de ces boîtes, beaucoup plus que
   votre armoire à chaussures...

   Python étant vraisemblablement mieux organisé que vous, les
   emplacements utilisés pour stocker les éléments d'une liste sont
   numérotés. Cette numérotation comme à 0 (sans doute pour des
   raisons de facilité). Prenons l'exemple d'une liste de noms de
   mois. Elle comportera douze éléments numérotés de 0 à 11. Il est
   évidemment essentiel de bien intégrer cette manière de procéder. 

   Selon le type d'information que vous enregistrez dans les
   différentes << boîtes >>, celles-ci n'ont pas besoin d'avoir toutes
   la même taille. Python vous permet par exemple de placer une chaîne
   de caractères dans une boîte, un entier dans une autre, et une
   valeur en virgule flottante dans une troisième. L'ordinateur ne
   sait pas, et n'a pas besoin de savoir, ce qui se trouve dans
   chacune des boîtes. Tout ce qu'il voit, c'est une longue suite de
   chiffres qui pourraient représenter n'importe quoi. C'est Python
   qui effectue tout le travail nécessaire au traitement des données
   en fonction de leur type, et qui, si vous demandez l'élément numéro
   5 vous renvoie l'élément numéro 5 et rien d'autre.

   En règle générale, il est préférable de créer des listes formant
   des ensembles de données plus faciles à gérer. En vous limitant par
   exemple à une liste composée uniquement de nombres entiers, vous
   pouvez facilement faire des suppositions sur ce que vous pouvez y
   trouver, sans perdre votre temps à tenter de retrouver la bonne
   valeur. Pour autant, il y a bien entendu des cas où des données de
   nature diférente doivent être associées. Cependant, souvenez-vous
   que cela impose de déterminer le type des données lorsque vous
   recherchez des informations afin de pouvoir traiter correctement
   celles-ci. Prendre une chaîne pour un entier pourrait provoquer des
   problèmes dans votre application (ce qui n'est pas le cas dans
   d'autres langages de programmation, qui imposent généralement de ne
   créer que des listes formées d'éléments de même type).

* Créer des listes 

  Avant de pouvoir faire quoi que ce soit avec une liste, vous devez
  évidemment commencer par créer celle-ci. Comme cela a été mentionné
  plus haut, les listes de Python peuvent mélanger différents types de
  données. Mais c'est toujours une bonne pratique de n'utiliser qu'un
  seul type chaque fois que c'est possible. 

