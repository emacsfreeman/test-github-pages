#+TITLE: Créer et utiliser des classes
#+AUTHOR: Laurent Garnier

* Comprendre les classes

* Les classes et leurs composants  

** Créer la définition d'une classe  

   #+BEGIN_SRC python
     class MyClass:
	 MyVar = 0

     MyInstance = MyClass()
     MyInstance.MyVar
   #+END_SRC

** Les classes et leurs attributs intégrés

** Travailler avec les méthodes   
*** Créer des méthodes de classe

    #+BEGIN_SRC python
      class MyClass:
	  def SayHello():
	      print("Bonjour le monde !")

      MyClass.SayHello()        
    #+END_SRC

*** Créer des méthodes d'instance

    #+BEGIN_SRC python
      class MyClass:
	  def SayHello(self):
	      print("Bonjour le monde !")

      MyInstance = MyClass()
      MyInstance.SayHello()
    #+END_SRC

** Travailler avec les constructeurs

   #+BEGIN_SRC python
     class MyClass:
	 Greeting = ""
	 def __init__(self, Name="le monde"):
	     self.Greeting = Name + " !"

	 def SayHello(self):
	     print("Bonjour {0}".format(self.Greeting))

     MyInstance = MyClass()
     MyInstance.SayHello()
     MyInstance = MyClass("Pierre")
     MyInstance.SayHello()
   #+END_SRC

** Travailler avec les variables
*** Créer des variables de classe

    #+BEGIN_SRC python
      class MyClass:
	  Greeting = ""
	  def SayHello(self):
	      print("Bonjour {0}".format(self.Greeting))

      MyClass.Greeting = "Sophie"
      MyClass.Greeting
      MyInstance = MyClass()
      MyInstance.SayHello()
    #+END_SRC

*** Créer des variables d'instance

    #+BEGIN_SRC python
      class MyClass:
	  def DoAdd(self, Value1=0, Value2=0):
	      Sum = Value1 + Value2
	      print("La somme de {0} plus {1} est {2}."
		    .format(Value1, Value2, Sum))

      MyInstance = MyClass()
      MyInstance.DoAdd(1, 4)
    #+END_SRC

** Utiliser des méthodes avec des listes d'arguments variables

   #+BEGIN_SRC python
     class MyClass:
	 def PrintList1(*args):
	     for Count, Item in enumerate(args):
		 print("{0}. {1}".format(Count, Item))

	 def PrintList2(**kwargs):
	     for Name, Value in kwargs.items():
		 print("{0} aime le {1}".format(Name, Value))

     MyClass.PrintList1("Rouge", "Bleu", "Vert")
     MyClass.PrintList2(Georges="Rouge", Annie="Bleu", Sarah="Vert")
   #+END_SRC

** Surcharger les opérateurs

   #+BEGIN_SRC python
     class MyClass:
	 def __init__(self, *args):
	     self.Input = args

	 def __add__(self, Other):
	     Output = MyClass()
	     Output.Input = self.Input + Other.Input
	     return Output

	 def __str__(self):
	     Output = ""
	     for Item in self.Input:
		 Output += Item
		 Output += " "
	     return Output

     Value1 = MyClass("Rouge", "Vert", "Bleu")
     Value2 = MyClass("Jaune", "Pourpre", "Cyan")
     Value3 = Value1 + Value2

     print("{0} + {1} = {2}"
	   .format(Value1, Value2, Value3))
   #+END_SRC

* Créer une classe

  #+BEGIN_SRC python
    class MyClass:
	def __init__(self, Name="Samuel", Age=32):
	    self.Name = Name
	    self.Age = Age

	def GetName(self):
	    return self.Name

	def SetName(self, Name):
	    self.Name = Name

	def GetAge(self):
	    return self.Age

	def SetAge(self, Age):
	    self.Age = Age

	def __str__(self):
	    return "{0} est âgé(e) de {1} ans.".format(self.Name, self.Age)
  #+END_SRC

* Utiliser la classe dans une application

  #+BEGIN_SRC python
    import MyClass

    SamuelRecord = MyClass.Myclass()
    AnnieRecord = MyClass.MyClass("Annie", 44)

    print(SamuelRecord.GetAge())
    SamsRecord.SetAge(33)

    print(AnnieRecord.GetName())
    AnnieRecord.SetName("Sophie")

    print(SamuelRecord)
    print(AnnieRecord)
  #+END_SRC

* Etendre des classes pour en créer de nouvelles
** Construire la classe enfant

   #+BEGIN_SRC python
     class Animal:
	 def __init__(self, Name="", Age=0, Type=""):
	     self.Name = Name
	     self.Age = Age
	     self.Type = Type

	 def GetName(self):
	     return self.Name

	 def SetName(self, Name):
	     self.Name = Name

	 def GetAge(self):
	     return self.Age

	 def SetAge(self, Age):
	     self.Age = Age

	 def GetType(self):
	     return self.Type

	 def SetType(self, Type):
	     self.Type = Type

	 def __str__(self):
	     return "{0} est un {1} âgé de {2} ans.".format(self.Name,
							    self.Type,
							    self.Age)

     class Chicken(Animal):
	 def __init__(self, Name="", Age=0):
	     self.Name = Name
	     self.Age = Age
	     self.Type = "poulet"

	 def SetType(self, Type):
	     print("Désolé, {0} sera toujorus un {1}."
		   .format(self.Name, self.Type))

	 def MakeSound(self):
	     print("{0} dit Cot, Cot, Codette !".format(self.Name))
   #+END_SRC

** Tester la classe dans une application 

   #+BEGIN_SRC python
     import Animals

     MyChicken = Animals.Chicken("Arthur", 2)
     print(MyChicken)
     MyChicken.SetAge(MyChicken.GetAge() + 1)
     print(MyChicken)
     MyChicken.SetType("Gorille")
     print(MyChicken)
     MyChicken.MakeSound()
   #+END_SRC
