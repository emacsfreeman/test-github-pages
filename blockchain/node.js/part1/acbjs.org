#+TITLE: Apprends Ã  Coder 1 Blockchain avec JavaScript
#+AUTHOR: Laurent Garnier

* Les instructions dans le terminal

  #+BEGIN_SRC shell
    npm install --save crypto-js
  #+END_SRC

* Le code Node.js

  #+BEGIN_SRC javascript
    const SHA256 = require('crypto-js/sha256');

class Block{
    constructor(index, timestamp, data, previousHash = ''){
        this.index = index;
        this.timestamp = timestamp;
        this.data = data;
        this.previousHash = previousHash;
        this.hash = this.calculateHash();
    }

    calculateHash(){
        return SHA256(this.index + this.previousHash + this.timestamp + JSON.stringify(this.data)).toString();
    }

}

class Blockchain{
    constructor(){
        this.chain = [this.createGenesisBlock()];
    }

    createGenesisBlock(){
        return new Block(0, "01/01/2019", "Genesis block", "0");
    }

    getLatestBlock(){
        return this.chain[this.chain.length - 1];
    }

    addBlock(newBlock){
        newBlock.previousHash = this.getLatestBlock().hash;
        newBlock.hash = newBlock.calculateHash();
        this.chain.push(newBlock);
    }

    isChainValid(){
        for (let i = 1; i < this.length; i++){
            const currentBlock = this.chain[i];
            const previousBlock = this.chain[i - 1];

            if (currentBlock.hash !== currentBlock.calculateHash()){
                return false;
            }

            if (currentBlock.previousHash !== previousBlock.hash){
                return false;
            }
        }

        return true;
    }
}

let laurentCoin = new Blockchain();
laurentCoin.addBlock(new Block(1, "01/04/2019", { amount: 5 }));
laurentCoin.addBlock(new Block(2, "02/04/2019", { amount: 3 }));

console.log("Is blockchain valid? " + laurentCoin.isChainValid());

laurentCoin.chain[1].data = { amount: 100 };
laurentCoin.chain[1].hash = laurentCoin.chain[1].calculateHash();

console.log("Is blockchain valid? " + laurentCoin.isChainValid());

// console.log(JSON.stringify(laurentCoin, null, 4));
  #+END_SRC
