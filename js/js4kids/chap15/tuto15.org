#+TITLE: Contrôler des animations avec le clavier
#+AUTHOR: Laurent Garnier

* Les événements du clavier
** Mettre en place le fichier html

   #+BEGIN_SRC html
     <!DOCTYPE html>
     <html lang="fr" dir="ltr">
       <head>
	 <meta charset="utf-8">
	 <title>Entrées du clavier</title>
       </head>
       <body>
	 <canvas id="canvas" width="400" height="400"></canvas>

	 <script
	 src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
	 integrity="sha256-3edrmyuQ0w65f8gfBsqowzjJe2iM6n0nKciPUp8y+7E="
	 crossorigin="anonymous"></script>

	 <script type="text/javascript">
	   // Code goes here
	 </script>

       </body>
     </html>
   #+END_SRC

** Ajouter le gestionnaire d'événements =keydown=

   #+BEGIN_SRC javascript
     $("body").keydown(function (event) {
	 console.log(event.keyCode);
     });
   #+END_SRC

   Taper des lettres au clavier

** Utiliser un objet pour convertir des codes de touches en noms

   #+BEGIN_SRC javascript
     var keyNames = {
	 32: "space",
	 37: "left",
	 38: "up",
	 39: "right",
	 40: "down"
     };

     $("body").keydown(function (event) {
	 console.log(keyNames[event.keyCode]);
     });
   #+END_SRC

* Déplacer une balle avec le clavier
** Configurer le canvas

   #+BEGIN_SRC javascript
     var canvas = document.getElementById("canvas");
     var ctx = canvas.getContext("2d");
     var width = canvas.width;
     var height = canvas.height;
   #+END_SRC
   
** Définir la fonction cercle 

   #+BEGIN_SRC javascript
     var circle = function (x, y, radius, fillCircle) {
	 ctx.beginPath();
	 ctx.arc(x, y, radius, 0, Math.PI * 2, false);
	 if (fillCircle) {
	     ctx.fill();
	 } else {
	     ctx.stroke();
	 }
     };
   #+END_SRC

** Créer le constructeur

   #+BEGIN_SRC javascript
     var Ball = function () {
	 this.x = width / 2;
	 this.y = height / 2;
	 this.xSpeed = 5;
	 this.ySpeed = 0;
     };
   #+END_SRC

** Définir la méthode déplacer

   #+BEGIN_SRC javascript
     Ball.prototype.move = function () {
	 this.x += this.xSpeed;
	 this.y += this.ySpeed;

	 if (this.x < 0) {
	     this.x = width;
	 } else if (this.x > width) {
	     this.x = 0;
	 } else if (this.y < 0) {
	     this.y = height;
	 } else if (this.y > height) {
	     this.y = 0;
	 }
     };
   #+END_SRC

** Définir la méthode pour dessiner

   #+BEGIN_SRC javascript
     Ball.prototype.draw = function () {
	 circle(this.x, this.y, 10, true);
     };
   #+END_SRC

** Créer une méthode =setDirection=   

   #+BEGIN_SRC javascript
     Ball.prototype.setDirection = function (direction) {
	 if (direction === "up") {
	     this.xSpeed = 0;
	     this.ySpeed = -5;
	 } else if (direction === "down") {
	     this.xSpeed = 0;
	     this.ySpeed = 5;
	 } else if (direction === "left") {
	     this.xSpeed = -5;
	     this.ySpeed = 0;
	 } else if (direction === "right") {
	     this.xSpeed = 5;
	     this.ySpeed = 0;
	 } else if (direction === "stop") {
	     this.xSpeed = 0;
	     this.ySpeed = 0;
	 }
     };
   #+END_SRC

** Réagir au clavier

   #+BEGIN_SRC javascript
     var ball = new Ball();

     var keyActions = {
	 32: "stop",
	 37: "left",
	 38: "up",
	 39: "right",
	 40: "down"
     };

     $("body").keydown(function (event) {
	 var direction = keyActions[event.keyCode];
	 ball.setDirection(direction);
     });
   #+END_SRC

** Animer la balle

   #+BEGIN_SRC javascript
     setInterval(function () {
	 ctx.clearRect(0, 0, width, height);

	 ball.draw();
	 ball.move();

	 ctx.strokeRect(0, 0, width, height);
     }, 30);
   #+END_SRC

* Assembler le tout

  #+BEGIN_SRC javascript
    var canvas = document.getElementById("canvas");
    var ctx = canvas.getContext("2d");
    var width = canvas.width;
    var height = canvas.height;

    var circle = function (x, y, radius, fillCircle) {
	ctx.beginPath();
	ctx.arc(x, y, radius, 0, Math.PI * 2, false);
	if (fillCircle) {
	    ctx.fill();
	} else {
	    ctx.stroke();
	}
    };

    // The Ball constructor
    var Ball = function () {
	this.x = width / 2;
	this.y = height / 2;
	this.xSpeed = 5;
	this.ySpeed = 0;
    };

    // Update the ball's position based on its speed
    Ball.prototype.move = function () {
	this.x += this.xSpeed;
	this.y += this.ySpeed;

	if (this.x < 0) {
	    this.x = width;
	} else if (this.x > width) {
	    this.x = 0;
	} else if (this.y < 0) {
	    this.y = height;
	} else if (this.y > height) {
	    this.y = 0;
	}
    };

    // Draw the ball at its current position
    Ball.prototype.draw = function () {
	circle(this.x, this.y, 10, true);
    };

    // Set the ball's direction based on a string
    Ball.prototype.setDirection = function (direction) {
	if (direction === "up") {
	    this.xSpeed = 0;
	    this.ySpeed = -5;
	} else if (direction === "down") {
	    this.xSpeed = 0;
	    this.ySpeed = 5;
	} else if (direction === "left") {
	    this.xSpeed = -5;
	    this.ySpeed = 0;
	} else if (direction === "right") {
	    this.xSpeed = 5;
	    this.ySpeed = 0;
	} else if (direction === "stop") {
	    this.xSpeed = 0;
	    this.ySpeed = 0;
	}
    };

    // Create the ball object
    var ball = new Ball();

    // An object to convert keycodes into action names
    var keyActions = {
	32: "stop",
	37: "left",
	38: "up",
	39: "right",
	40: "down"
    };

    // The keydown handler that will be called for every keypress
    $("body").keydown(function (event) {
	var direction = keyActions[event.keyCode];
	ball.setDirection(direction);
    });

    // The animation function, called every 30 ms
    setInterval(function () {
	ctx.clearRect(0, 0, width, height);

	ball.draw();
	ball.move();

	ctx.strokeRect(0, 0, width, height);
    }, 30);
  #+END_SRC

